2487. Remove Nodes From Linked List

You are given the head of a linked list.

Remove every node which has a node with a greater value anywhere to the right side of it.

Return the head of the modified linked list.

 

Example 1:


Input: head = [5,2,13,3,8]
Output: [13,8]
Explanation: The nodes that should be removed are 5, 2 and 3.
- Node 13 is to the right of node 5.
- Node 13 is to the right of node 2.
- Node 8 is to the right of node 3.



Solution:

class Solution {
    public ListNode removeNodes(ListNode head) {
        // Step 1: Reverse the list
        head = reverse(head);

        // Step 2: Traverse and keep max values
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        int maxSoFar = Integer.MIN_VALUE;

        while (head != null) {
            if (head.val >= maxSoFar) {
                maxSoFar = head.val;
                current.next = head;
                current = current.next;
            }
            head = head.next;
        }

        // Cut off remaining nodes
        current.next = null;

        // Step 3: Reverse again to restore original order
        return reverse(dummy.next);
    }

    private ListNode reverse(ListNode head) {
        ListNode prev = null, next = null;
        while (head != null) {
            next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }
}
